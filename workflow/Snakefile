#!/usr/bin/env python3

from jinja2 import Template
from pathlib import Path


include: "rules/common.smk"


configfile: "config/config.yaml"


#############
# FUNCTIONS #
#############


def get_hifi_readfiles(wildcards):
    return [
        Path("resources", "reads", filename)
        for filename, url in data_file_dict.items()
        if filename.endswith(".ccs.bam")
    ]


def get_url(wildcards):
    my_url = data_file_dict[wildcards.readfile]
    return storage.http(my_url)


########
# MAIN #
########

globals().update(config)

# this is from teh bpa_dataportal_downloads project
# results of a search for query = {"sample_id": '102.100.100/411655'}
data_file_dict = {
    "414129_AusARG_AGRF_DA235386.subreads.bam": "https://data.bioplatforms.com/dataset/bpa-ausarg-pacbio-hifi-414129-da235386/resource/f28fe709744235efc0da895975c68f6f/download/414129_AusARG_AGRF_DA235386.subreads.bam",
    "414129_AusARG_AGRF_DA235386.ccs.bam": "https://data.bioplatforms.com/dataset/bpa-ausarg-pacbio-hifi-414129-da235386/resource/27fc8f6c8fb9e3b462a3cdae002bd5f4/download/414129_AusARG_AGRF_DA235386.ccs.bam",
    "414129_AusARG_AGRF_DA235337.subreads.bam": "https://data.bioplatforms.com/dataset/bpa-ausarg-pacbio-hifi-414129-da235337/resource/303068e96c58206aafd222a2cad04545/download/414129_AusARG_AGRF_DA235337.subreads.bam",
    "414129_AusARG_AGRF_DA235337.ccs.bam": "https://data.bioplatforms.com/dataset/bpa-ausarg-pacbio-hifi-414129-da235337/resource/bdd8b8ba65c217945353138c1ba0d4be/download/414129_AusARG_AGRF_DA235337.ccs.bam",
    "414130_AusARG_BRF_HKWJJDMXY_AAGCATCG_S5_R2_001.fastq.gz": "https://data.bioplatforms.com/dataset/bpa-ausarg-hi-c-414130-hkwjjdmxy/resource/71e2e0c5384d238811bd78e54cbe0111/download/414130_AusARG_BRF_HKWJJDMXY_AAGCATCG_S5_R2_001.fastq.gz",
    "414130_AusARG_BRF_HKWJJDMXY_AAGCATCG_S5_R1_001.fastq.gz": "https://data.bioplatforms.com/dataset/bpa-ausarg-hi-c-414130-hkwjjdmxy/resource/796d9cd507b33eb34b3b31e4200129c7/download/414130_AusARG_BRF_HKWJJDMXY_AAGCATCG_S5_R1_001.fastq.gz",
}


#########
# RULES #
#########

# TARGET IS AT THE END


# # Run the pipeline
# rule sanger_tol_genomeassembly:
#     input:
#         input=Path(outdir, "config", "sangertol_genomeassembly_params.yaml"),
#     output:
#         report="results/multiqc/broadPeak/multiqc_report.html",
#     params:
#         pipeline="sanger-tol/genomeassembly",
#         revision="0.10.0",
#         profile=["singularity", "spartan"],
#         outdir=lambda wildcards, output: str(Path(output.report).parents[-2]),
#     handover: True
#     wrapper:
#         "v5.5.0-8-gb18ec90/utils/nextflow"


# Set up the pipeline
rule format_config_file:
    input:
        sanger_config_template=sanger_config_template,
        pacbio_reads=Path("results", "reads", "ccs_reads.fasta.gz"),
        hic_reads=Path("results", "reads", "hic.cram"),
    output:
        rendered_yaml=Path("results", "config", "sangertol_genomeassembly_params.yaml"),
    run:
        with open(input.sanger_config_template) as f:
            template = Template(f.read())
        rendered_yaml = template.render(
            dataset_id=dataset_id,
            hic_motif=hic_motif,
            busco_lineage=busco_lineage,
            mito_species=mito_species,
            mito_min_length=mito_min_length,
            mito_code=mito_code,
            pacbio_reads=[input.pacbio_reads],
            hic_reads=[input.hic_reads],
        )
        with open(output.rendered_yaml, "w") as f:
            f.write(rendered_yaml)


# Combine Hi-C reads as follows: contains the list (-reads) of the HiC reads in
# the indexed CRAM format. There is a suggested method here:
# https://pipelines.tol.sanger.ac.uk/curationpretext/1.0.1/usage
# (Current attempt: don't include the SAM tags. See details at URL.)
rule samtools_import:
    input:
        r1=Path(
            "resources",
            "reads",
            "414130_AusARG_BRF_HKWJJDMXY_AAGCATCG_S5_R1_001.fastq.gz",
        ),
        r2=Path(
            "resources",
            "reads",
            "414130_AusARG_BRF_HKWJJDMXY_AAGCATCG_S5_R2_001.fastq.gz",
        ),
    output:
        cram=Path("results", "reads", "hic.cram"),
        index=Path("results", "reads", "hic.cram.crai"),
    log:
        Path("logs", "samtools_import.log"),
    resources:
        time=120,
    container:
        get_container("samtools")
    shell:
        "samtools import "
        "-@{threads} "
        "{input.r1} "
        "{input.r2} "
        "-o {output.cram} "
        "2> {log} "
        "&& "
        "samtools index "
        "{output.cram} "
        "2>> {log} "


# Combine HiFi reads as follows:
# contains the list (-reads) of the HiFi reads in FASTA (or gzipped FASTA)
# format in. The pipeline implementation is based on an assumption that reads
# have gone through adapter/barcode checks.


rule pigz:
    input:
        Path("results", "reads", "ccs_reads.fasta"),
    output:
        Path("results", "reads", "ccs_reads.fasta.gz"),
    threads: 8
    resources:
        time=120,
    container:
        get_container("pigz")
    shell:
        "pigz -9 "
        "--processes {threads} "
        "< {input} > {output}"


rule samtools_fasta:
    input:
        get_hifi_readfiles,
    output:
        pipe(Path("results", "reads", "ccs_reads.fasta")),
    log:
        Path("logs", "samtools_fasta.log"),
    resources:
        time=120,
    container:
        get_container("samtools")
    shell:
        "samtools cat "
        "{input} "
        "| "
        "samtools fasta "
        "- "
        ">> {output} "
        "2> {log}"


rule download_from_bpa:
    input:
        get_url,
    output:
        Path("resources", "reads", "{readfile}"),
    shell:
        "cp {input} {output}"


###########
# TARGETS #
###########


rule target:
    default_target: True
    input:
        rules.format_config_file.output,
